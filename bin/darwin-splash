#!/usr/bin/env bash
# vim: noai:ts=4:sw=4:expandtab
# shellcheck source=/dev/null
# shellcheck disable=2009

readonly _D="$(dirname "$(readlink -f "$0")")" && cd $_D

cache_uname() {
    # Cache the output of uname so we don't
    # have to spawn it multiple times.
    IFS=" " read -ra uname <<< "$(uname -srm)"

    kernel_name="${uname[0]}"
    kernel_version="${uname[1]}"
    kernel_machine="${uname[2]}"

    if [[ "$kernel_name" == "Darwin" ]]; then
        IFS=$'\n' read -d "" -ra sw_vers <<< "$(awk -F'<|>' '/key|string/ {print $3}' \
                            "/System/Library/CoreServices/SystemVersion.plist")"
        for ((i=0;i<${#sw_vers[@]};i+=2)) {
            case ${sw_vers[i]} in
                ProductName)          darwin_name=${sw_vers[i+1]} ;;
                ProductVersion)       osx_version=${sw_vers[i+1]} ;;
                ProductBuildVersion)  osx_build=${sw_vers[i+1]}   ;;
            esac
        }
    fi
}

get_os() {
    # $kernel_name is set in a function called cache_uname and is
    # just the output of "uname -s".
    case $kernel_name in
        Darwin)   os=$darwin_name ;;
        SunOS)    os=Solaris ;;
        Haiku)    os=Haiku ;;
        MINIX)    os=MINIX ;;
        AIX)      os=AIX ;;
        IRIX*)    os=IRIX ;;
        FreeMiNT) os=FreeMiNT ;;

        Linux|GNU*)
            os=Linux
        ;;

        *BSD|DragonFly|Bitrig)
            os=BSD
        ;;

        CYGWIN*|MSYS*|MINGW*)
            os=Windows
        ;;

        *)
            printf '%s\n' "Unknown OS detected: '$kernel_name', aborting..." >&2
            printf '%s\n' "Open an issue on GitHub to add support for your OS." >&2
            exit 1
        ;;
    esac
}


trim() {
    local var="$*"
    var="${var#"${var%%[![:space:]]*}"}"
    var="${var%"${var##*[![:space:]]}"}"
    printf '%s' "$var"
}

ansi_colors()
{
  esc=""

  black="$esc[30m";   red="$esc[31m";    green="$esc[32m"
  yellow="$esc[33m"   blue="$esc[34m";   purple="$esc[35m"
  cyan="$esc[36m";    white="$esc[37m"

  blackb="$esc[40m";   redb="$esc[41m";    greenb="$esc[42m"
  yellowb="$esc[43m"   blueb="$esc[44m";   purpleb="$esc[45m"
  cyanb="$esc[46m";    whiteb="$esc[47m"

  bold="$esc[1m";    boldoff="$esc[22m"
  italics="$esc[3m"; italicsoff="$esc[23m"
  ul="$esc[4m";      uloff="$esc[24m"
  inv="$esc[7m";     invoff="$esc[27m"

  reset="$esc[0m"
  r="$esc[0m"
}

main() {

    ansi_colors

    h3="$reset$bold$purple"
    h2="$reset$bold$yellow"
    h1="$reset$bold$green"
    p1="$reset"

    ip="$(ifconfig -l | xargs -n1 ipconfig getifaddr | paste -sd ' ' -)"
    #ip="$(ip route get 1.1.1.1 | head -1 | cut -d' ' -f7)"
    kernel="$(uname -srm)"
    uptime="$(uptime)"
    hostname="$(hostname)"
    load="$(uptime | cut -f4 -d, | cut -f2 -d:)"
    load="$(trim $load)"
    uptime="$(uptime | cut -f1 -d,)"
    os="$(sw_vers -productVersion)"

cat <<EOF

    ${h2} Â· IP         ${r}${ip}
    ${h2} Â· Kernel     ${r}${kernel}
    ${h2} Â· OS         ${r}MacOS ${os}
    ${h2} Â· Load       ${r}${load}
    ${h2} Â· Uptime     ${r}${uptime}
    ${h1} â—‹ Hostname   ${h3}${hostname}${r}

EOF
}

main "$@"

